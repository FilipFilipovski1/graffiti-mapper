{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Filip\\\\Diplomska Rabota First\\\\Diplomska Rabota\\\\Frontend\\\\src\\\\graffiti\\\\pages\\\\UserGraffiti.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport GraffitiList from '../components/GraffitiList';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport './UserGraffiti.css';\n\nconst UserGraffiti = () => {\n  const [loadedGraffiti, setLoadedGraffiti] = useState();\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [filteredGraffiti, setFilteredGraffiti] = useState([]);\n  const userId = useParams().userId;\n  useEffect(() => {\n    const fetchGraffiti = async () => {\n      try {\n        const responseData = await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`);\n        setLoadedGraffiti(responseData.places);\n        setFilteredGraffiti(responseData.places);\n      } catch (err) {}\n    };\n\n    fetchGraffiti();\n  }, [sendRequest, userId]);\n\n  const graffitiDeletedHandler = deletedGraffitiId => {\n    setLoadedGraffiti(prevGraffiti => prevGraffiti.filter(graffito => graffito.id !== deletedGraffitiId));\n  };\n\n  const sorting = title => {\n    console.log(title);\n    const key = document.getElementById('selectSorting').value;\n    const temp = loadedGraffiti.filter(item => item[key].toLowerCase().includes(title.toLowerCase()));\n    console.log(temp);\n    setFilteredGraffiti(temp);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  })), !isLoading && loadedGraffiti && /*#__PURE__*/React.createElement(GraffitiList, {\n    items: loadedGraffiti,\n    onDeleteGraffiti: graffitiDeletedHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default UserGraffiti;","map":{"version":3,"sources":["C:/Users/Filip/Diplomska Rabota First/Diplomska Rabota/Frontend/src/graffiti/pages/UserGraffiti.js"],"names":["React","useEffect","useState","useParams","GraffitiList","ErrorModal","LoadingSpinner","useHttpClient","UserGraffiti","loadedGraffiti","setLoadedGraffiti","isLoading","error","sendRequest","clearError","filteredGraffiti","setFilteredGraffiti","userId","fetchGraffiti","responseData","process","env","REACT_APP_BACKEND_URL","places","err","graffitiDeletedHandler","deletedGraffitiId","prevGraffiti","filter","graffito","id","sorting","title","console","log","key","document","getElementById","value","temp","item","toLowerCase","includes"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAEA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,UAAP,MAAuB,+CAAvB;AACA,OAAOC,cAAP,MAA2B,mDAA3B;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,OAAO,oBAAP;;AACA,MAAMC,YAAY,GAAG,MAAM;AACzB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCR,QAAQ,EAApD;AACA,QAAM;AAAES,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA,WAApB;AAAiCC,IAAAA;AAAjC,MAAgDP,aAAa,EAAnE;AACA,QAAM,CAACQ,gBAAD,EAAmBC,mBAAnB,IAA0Cd,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAMe,MAAM,GAAGd,SAAS,GAAGc,MAA3B;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,aAAa,GAAG,YAAY;AAChC,UAAI;AACF,cAAMC,YAAY,GAAG,MAAMN,WAAW,CACnC,GAAEO,OAAO,CAACC,GAAR,CAAYC,qBAAsB,gBAAeL,MAAO,EADvB,CAAtC;AAGAP,QAAAA,iBAAiB,CAACS,YAAY,CAACI,MAAd,CAAjB;AACAP,QAAAA,mBAAmB,CAACG,YAAY,CAACI,MAAd,CAAnB;AACD,OAND,CAME,OAAOC,GAAP,EAAY,CAAE;AACjB,KARD;;AASAN,IAAAA,aAAa;AACd,GAXQ,EAWN,CAACL,WAAD,EAAcI,MAAd,CAXM,CAAT;;AAaA,QAAMQ,sBAAsB,GAAGC,iBAAiB,IAAI;AAClDhB,IAAAA,iBAAiB,CAACiB,YAAY,IAC5BA,YAAY,CAACC,MAAb,CAAoBC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBJ,iBAAhD,CADe,CAAjB;AAGD,GAJD;;AAOA,QAAMK,OAAO,GAAIC,KAAD,IAAa;AAC3BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,UAAMG,GAAG,GAAGC,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyCC,KAArD;AACA,UAAMC,IAAI,GAAG9B,cAAc,CAACmB,MAAf,CAAsBY,IAAI,IAAIA,IAAI,CAACL,GAAD,CAAJ,CAAUM,WAAV,GAAwBC,QAAxB,CAAiCV,KAAK,CAACS,WAAN,EAAjC,CAA9B,CAAb;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ;AACAvB,IAAAA,mBAAmB,CAACuB,IAAD,CAAnB;AACD,GAND;;AAOA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAE3B,KAAnB;AAA0B,IAAA,OAAO,EAAEE,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGH,SAAS,iBACR;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAHJ,EAOG,CAACA,SAAD,IAAcF,cAAd,iBACC,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAEA,cAArB;AAAqC,IAAA,gBAAgB,EAAEgB,sBAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,CADF;AAaD,CA9CD;;AAgDA,eAAejB,YAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport GraffitiList from '../components/GraffitiList';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport './UserGraffiti.css';\r\nconst UserGraffiti = () => {\r\n  const [loadedGraffiti, setLoadedGraffiti] = useState();\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const [filteredGraffiti, setFilteredGraffiti] = useState([]);\r\n  const userId = useParams().userId;\r\n\r\n  useEffect(() => {\r\n    const fetchGraffiti = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`\r\n        );\r\n        setLoadedGraffiti(responseData.places);\r\n        setFilteredGraffiti(responseData.places);\r\n      } catch (err) {}\r\n    };\r\n    fetchGraffiti();\r\n  }, [sendRequest, userId]);\r\n\r\n  const graffitiDeletedHandler = deletedGraffitiId => {\r\n    setLoadedGraffiti(prevGraffiti =>\r\n      prevGraffiti.filter(graffito => graffito.id !== deletedGraffitiId)\r\n    );\r\n  };\r\n\r\n\r\n  const sorting = (title, ) => {\r\n    console.log(title);\r\n    const key = document.getElementById('selectSorting').value;\r\n    const temp = loadedGraffiti.filter(item => item[key].toLowerCase().includes(title.toLowerCase()));\r\n    console.log(temp);\r\n    setFilteredGraffiti(temp);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {isLoading && (\r\n        <div className=\"center\">\r\n          <LoadingSpinner />\r\n        </div>\r\n      )}\r\n      {!isLoading && loadedGraffiti && (\r\n        <GraffitiList items={loadedGraffiti} onDeleteGraffiti={graffitiDeletedHandler} />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default UserGraffiti;\r\n"]},"metadata":{},"sourceType":"module"}