{"ast":null,"code":"// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n// import PlaceList from '../components/PlaceList';\n// import ErrorModal from '../../shared/components/UIElements/ErrorModal';\n// import LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\n// import { useHttpClient } from '../../shared/hooks/http-hook';\n// const UserPlaces = () => {\n//   const [loadedPlaces, setLoadedPlaces] = useState();\n//   const { isLoading, error, sendRequest, clearError } = useHttpClient();\n//   const userId = useParams().userId;\n//   useEffect(() => {\n//     const fetchPlaces = async () => {\n//       try {\n//         const responseData = await sendRequest(\n//           `${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`\n//         );\n//         setLoadedPlaces(responseData.places);\n//       } catch (err) {}\n//     };\n//     fetchPlaces();\n//   }, [sendRequest, userId]);\n//   const placeDeletedHandler = deletedPlaceId => {\n//     setLoadedPlaces(prevPlaces =>\n//       prevPlaces.filter(place => place.id !== deletedPlaceId)\n//     );\n//   };\n//   return (\n//     <React.Fragment>\n//       <ErrorModal error={error} onClear={clearError} />\n//       {isLoading && (\n//         <div className=\"center\">\n//           <LoadingSpinner />\n//         </div>\n//       )}\n//       {!isLoading && loadedPlaces && (\n//         <PlaceList items={loadedPlaces} onDeletePlace={placeDeletedHandler} />\n//       )}\n//     </React.Fragment>\n//   );\n// };\n// export default UserPlaces;","map":{"version":3,"sources":["C:/Users/Filip/Diplomska Rabota/Frontend/src/places/pages/UserPlaces.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n\r\n// import PlaceList from '../components/PlaceList';\r\n// import ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\n// import LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\n// import { useHttpClient } from '../../shared/hooks/http-hook';\r\n\r\n// const UserPlaces = () => {\r\n//   const [loadedPlaces, setLoadedPlaces] = useState();\r\n//   const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n//   const userId = useParams().userId;\r\n\r\n//   useEffect(() => {\r\n//     const fetchPlaces = async () => {\r\n//       try {\r\n//         const responseData = await sendRequest(\r\n//           `${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`\r\n//         );\r\n//         setLoadedPlaces(responseData.places);\r\n//       } catch (err) {}\r\n//     };\r\n//     fetchPlaces();\r\n//   }, [sendRequest, userId]);\r\n\r\n//   const placeDeletedHandler = deletedPlaceId => {\r\n//     setLoadedPlaces(prevPlaces =>\r\n//       prevPlaces.filter(place => place.id !== deletedPlaceId)\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <React.Fragment>\r\n//       <ErrorModal error={error} onClear={clearError} />\r\n//       {isLoading && (\r\n//         <div className=\"center\">\r\n//           <LoadingSpinner />\r\n//         </div>\r\n//       )}\r\n//       {!isLoading && loadedPlaces && (\r\n//         <PlaceList items={loadedPlaces} onDeletePlace={placeDeletedHandler} />\r\n//       )}\r\n//     </React.Fragment>\r\n//   );\r\n// };\r\n\r\n// export default UserPlaces;\r\n"]},"metadata":{},"sourceType":"module"}