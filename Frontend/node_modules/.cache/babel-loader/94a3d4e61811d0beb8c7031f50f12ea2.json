{"ast":null,"code":"// import React, { useEffect, useState, useContext } from 'react';\n// import { useParams, useHistory } from 'react-router-dom';\n// import Input from '../../shared/components/FormElements/Input';\n// import Button from '../../shared/components/FormElements/Button';\n// import Card from '../../shared/components/UIElements/Card';\n// import LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\n// import ErrorModal from '../../shared/components/UIElements/ErrorModal';\n// import {\n//   VALIDATOR_REQUIRE,\n//   VALIDATOR_MINLENGTH\n// } from '../../shared/util/validators';\n// import { useForm } from '../../shared/hooks/form-hook';\n// import { useHttpClient } from '../../shared/hooks/http-hook';\n// import { AuthContext } from '../../shared/context/auth-context';\n// import './PlaceForm.css';\n// const UpdatePlace = () => {\n//   const auth = useContext(AuthContext);\n//   const { isLoading, error, sendRequest, clearError } = useHttpClient();\n//   const [loadedPlace, setLoadedPlace] = useState();\n//   const placeId = useParams().placeId;\n//   const history = useHistory();\n//   const [formState, inputHandler, setFormData] = useForm(\n//     {\n//       title: {\n//         value: '',\n//         isValid: false\n//       },\n//       description: {\n//         value: '',\n//         isValid: false\n//       }\n//     },\n//     false\n//   );\n//   useEffect(() => {\n//     const fetchPlace = async () => {\n//       try {\n//         const responseData = await sendRequest(\n//           `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`\n//         );\n//         setLoadedPlace(responseData.place);\n//         setFormData(\n//           {\n//             title: {\n//               value: responseData.place.title,\n//               isValid: true\n//             },\n//             description: {\n//               value: responseData.place.description,\n//               isValid: true\n//             }\n//           },\n//           true\n//         );\n//       } catch (err) {}\n//     };\n//     fetchPlace();\n//   }, [sendRequest, placeId, setFormData]);\n//   const placeUpdateSubmitHandler = async event => {\n//     event.preventDefault();\n//     try {\n//       await sendRequest(\n//         `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`,\n//         'PATCH',\n//         JSON.stringify({\n//           title: formState.inputs.title.value,\n//           description: formState.inputs.description.value\n//         }),\n//         {\n//           'Content-Type': 'application/json',\n//           Authorization: 'Bearer ' + auth.token\n//         }\n//       );\n//       history.push('/' + auth.userId + '/places');\n//     } catch (err) {}\n//   };\n//   if (isLoading) {\n//     return (\n//       <div className=\"center\">\n//         <LoadingSpinner />\n//       </div>\n//     );\n//   }\n//   if (!loadedPlace && !error) {\n//     return (\n//       <div className=\"center\">\n//         <Card>\n//           <h2>Could not find place!</h2>\n//         </Card>\n//       </div>\n//     );\n//   }\n//   return (\n//     <React.Fragment>\n//       <ErrorModal error={error} onClear={clearError} />\n//       {!isLoading && loadedPlace && (\n//         <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\n//           <Input\n//             id=\"title\"\n//             element=\"input\"\n//             type=\"text\"\n//             label=\"Title\"\n//             validators={[VALIDATOR_REQUIRE()]}\n//             errorText=\"Please enter a valid title.\"\n//             onInput={inputHandler}\n//             initialValue={loadedPlace.title}\n//             initialValid={true}\n//           />\n//           <Input\n//             id=\"description\"\n//             element=\"textarea\"\n//             label=\"Description\"\n//             validators={[VALIDATOR_MINLENGTH(5)]}\n//             errorText=\"Please enter a valid description (min. 5 characters).\"\n//             onInput={inputHandler}\n//             initialValue={loadedPlace.description}\n//             initialValid={true}\n//           />\n//           <Button type=\"submit\" disabled={!formState.isValid}>\n//             UPDATE PLACE\n//           </Button>\n//         </form>\n//       )}\n//     </React.Fragment>\n//   );\n// };\n// export default UpdatePlace;","map":{"version":3,"sources":["C:/Users/Filip/Diplomska Rabota/Frontend/src/places/pages/UpdatePlace.js"],"names":[],"mappingssourcesContent":["// import React, { useEffect, useState, useContext } from 'react';\r\n// import { useParams, useHistory } from 'react-router-dom';\r\n\r\n// import Input from '../../shared/components/FormElements/Input';\r\n// import Button from '../../shared/components/FormElements/Button';\r\n// import Card from '../../shared/components/UIElements/Card';\r\n// import LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\n// import ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\n// import {\r\n//   VALIDATOR_REQUIRE,\r\n//   VALIDATOR_MINLENGTH\r\n// } from '../../shared/util/validators';\r\n// import { useForm } from '../../shared/hooks/form-hook';\r\n// import { useHttpClient } from '../../shared/hooks/http-hook';\r\n// import { AuthContext } from '../../shared/context/auth-context';\r\n// import './PlaceForm.css';\r\n\r\n// const UpdatePlace = () => {\r\n//   const auth = useContext(AuthContext);\r\n//   const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n//   const [loadedPlace, setLoadedPlace] = useState();\r\n//   const placeId = useParams().placeId;\r\n//   const history = useHistory();\r\n\r\n//   const [formState, inputHandler, setFormData] = useForm(\r\n//     {\r\n//       title: {\r\n//         value: '',\r\n//         isValid: false\r\n//       },\r\n//       description: {\r\n//         value: '',\r\n//         isValid: false\r\n//       }\r\n//     },\r\n//     false\r\n//   );\r\n\r\n//   useEffect(() => {\r\n//     const fetchPlace = async () => {\r\n//       try {\r\n//         const responseData = await sendRequest(\r\n//           `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`\r\n//         );\r\n//         setLoadedPlace(responseData.place);\r\n//         setFormData(\r\n//           {\r\n//             title: {\r\n//               value: responseData.place.title,\r\n//               isValid: true\r\n//             },\r\n//             description: {\r\n//               value: responseData.place.description,\r\n//               isValid: true\r\n//             }\r\n//           },\r\n//           true\r\n//         );\r\n//       } catch (err) {}\r\n//     };\r\n//     fetchPlace();\r\n//   }, [sendRequest, placeId, setFormData]);\r\n\r\n//   const placeUpdateSubmitHandler = async event => {\r\n//     event.preventDefault();\r\n//     try {\r\n//       await sendRequest(\r\n//         `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`,\r\n//         'PATCH',\r\n//         JSON.stringify({\r\n//           title: formState.inputs.title.value,\r\n//           description: formState.inputs.description.value\r\n//         }),\r\n//         {\r\n//           'Content-Type': 'application/json',\r\n//           Authorization: 'Bearer ' + auth.token\r\n//         }\r\n//       );\r\n//       history.push('/' + auth.userId + '/places');\r\n//     } catch (err) {}\r\n//   };\r\n\r\n//   if (isLoading) {\r\n//     return (\r\n//       <div className=\"center\">\r\n//         <LoadingSpinner />\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   if (!loadedPlace && !error) {\r\n//     return (\r\n//       <div className=\"center\">\r\n//         <Card>\r\n//           <h2>Could not find place!</h2>\r\n//         </Card>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <React.Fragment>\r\n//       <ErrorModal error={error} onClear={clearError} />\r\n//       {!isLoading && loadedPlace && (\r\n//         <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\r\n//           <Input\r\n//             id=\"title\"\r\n//             element=\"input\"\r\n//             type=\"text\"\r\n//             label=\"Title\"\r\n//             validators={[VALIDATOR_REQUIRE()]}\r\n//             errorText=\"Please enter a valid title.\"\r\n//             onInput={inputHandler}\r\n//             initialValue={loadedPlace.title}\r\n//             initialValid={true}\r\n//           />\r\n//           <Input\r\n//             id=\"description\"\r\n//             element=\"textarea\"\r\n//             label=\"Description\"\r\n//             validators={[VALIDATOR_MINLENGTH(5)]}\r\n//             errorText=\"Please enter a valid description (min. 5 characters).\"\r\n//             onInput={inputHandler}\r\n//             initialValue={loadedPlace.description}\r\n//             initialValid={true}\r\n//           />\r\n//           <Button type=\"submit\" disabled={!formState.isValid}>\r\n//             UPDATE PLACE\r\n//           </Button>\r\n//         </form>\r\n//       )}\r\n//     </React.Fragment>\r\n//   );\r\n// };\r\n\r\n// export default UpdatePlace;\r\n"]},"metadata":{},"sourceType":"module"}