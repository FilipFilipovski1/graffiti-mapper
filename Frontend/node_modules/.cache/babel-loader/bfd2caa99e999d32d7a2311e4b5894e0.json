{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Filip\\\\Diplomska Rabota\\\\Frontend\\\\src\\\\graffiti\\\\pages\\\\UpdateGraffiti.js\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport './GraffitiForm.css';\n\nconst UpdateGraffiti = () => {\n  const auth = useContext(AuthContext);\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [loadedGraffiti, setLoadedGraffiti] = useState();\n  const placeId = useParams().placeId;\n  const history = useHistory();\n  const [formState, inputHandler, setFormData] = useForm({\n    title: {\n      value: '',\n      isValid: false\n    },\n    description: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n  useEffect(() => {\n    const fetchPlace = async () => {\n      try {\n        const responseData = await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`);\n        setLoadedPlace(responseData.place);\n        setFormData({\n          title: {\n            value: responseData.place.title,\n            isValid: true\n          },\n          description: {\n            value: responseData.place.description,\n            isValid: true\n          }\n        }, true);\n      } catch (err) {}\n    };\n\n    fetchPlace();\n  }, [sendRequest, placeId, setFormData]);\n\n  const placeUpdateSubmitHandler = async event => {\n    event.preventDefault();\n\n    try {\n      await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`, 'PATCH', JSON.stringify({\n        title: formState.inputs.title.value,\n        description: formState.inputs.description.value\n      }), {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + auth.token\n      });\n      history.push('/' + auth.userId + '/places');\n    } catch (err) {}\n  };\n\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  if (!loadedPlace && !error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    }, \"Could not find Graffiti!\")));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }), !isLoading && loadedPlace && /*#__PURE__*/React.createElement(\"form\", {\n    className: \"graffiti-form\",\n    onSubmit: placeUpdateSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Title\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a valid title.\",\n    onInput: inputHandler,\n    initialValue: loadedPlace.title,\n    initialValid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"description\",\n    element: \"textarea\",\n    label: \"Description\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Please enter a valid description (min. 5 characters).\",\n    onInput: inputHandler,\n    initialValue: loadedPlace.description,\n    initialValid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }, \"UPDATE GRAFFITI\")));\n};\n\nexport default UpdateGraffiti;","map":{"version":3,"sources":["C:/Users/Filip/Diplomska Rabota/Frontend/src/graffiti/pages/UpdateGraffiti.js"],"names":["React","useEffect","useState","useContext","useParams","useHistory","Input","Button","Card","LoadingSpinner","ErrorModal","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","useHttpClient","AuthContext","UpdateGraffiti","auth","isLoading","error","sendRequest","clearError","loadedGraffiti","setLoadedGraffiti","placeId","history","formState","inputHandler","setFormData","title","value","isValid","description","fetchPlace","responseData","process","env","REACT_APP_BACKEND_URL","setLoadedPlace","place","err","placeUpdateSubmitHandler","event","preventDefault","JSON","stringify","inputs","Authorization","token","push","userId","loadedPlace"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\nimport Input from '../../shared/components/FormElements/Input';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport Card from '../../shared/components/UIElements/Card';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport {\r\n  VALIDATOR_REQUIRE,\r\n  VALIDATOR_MINLENGTH\r\n} from '../../shared/util/validators';\r\nimport { useForm } from '../../shared/hooks/form-hook';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport './GraffitiForm.css';\r\n\r\nconst UpdateGraffiti = () => {\r\n  const auth = useContext(AuthContext);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const [loadedGraffiti, setLoadedGraffiti] = useState();\r\n  const placeId = useParams().placeId;\r\n  const history = useHistory();\r\n\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      title: {\r\n        value: '',\r\n        isValid: false\r\n      },\r\n      description: {\r\n        value: '',\r\n        isValid: false\r\n      }\r\n    },\r\n    false\r\n  );\r\n\r\n  useEffect(() => {\r\n    const fetchPlace = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`\r\n        );\r\n        setLoadedPlace(responseData.place);\r\n        setFormData(\r\n          {\r\n            title: {\r\n              value: responseData.place.title,\r\n              isValid: true\r\n            },\r\n            description: {\r\n              value: responseData.place.description,\r\n              isValid: true\r\n            }\r\n          },\r\n          true\r\n        );\r\n      } catch (err) {}\r\n    };\r\n    fetchPlace();\r\n  }, [sendRequest, placeId, setFormData]);\r\n\r\n  const placeUpdateSubmitHandler = async event => {\r\n    event.preventDefault();\r\n    try {\r\n      await sendRequest(\r\n        `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`,\r\n        'PATCH',\r\n        JSON.stringify({\r\n          title: formState.inputs.title.value,\r\n          description: formState.inputs.description.value\r\n        }),\r\n        {\r\n          'Content-Type': 'application/json',\r\n          Authorization: 'Bearer ' + auth.token\r\n        }\r\n      );\r\n      history.push('/' + auth.userId + '/places');\r\n    } catch (err) {}\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"center\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!loadedPlace && !error) {\r\n    return (\r\n      <div className=\"center\">\r\n        <Card>\r\n          <h2>Could not find Graffiti!</h2>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {!isLoading && loadedPlace && (\r\n        <form className=\"graffiti-form\" onSubmit={placeUpdateSubmitHandler}>\r\n          <Input\r\n            id=\"title\"\r\n            element=\"input\"\r\n            type=\"text\"\r\n            label=\"Title\"\r\n            validators={[VALIDATOR_REQUIRE()]}\r\n            errorText=\"Please enter a valid title.\"\r\n            onInput={inputHandler}\r\n            initialValue={loadedPlace.title}\r\n            initialValid={true}\r\n          />\r\n          <Input\r\n            id=\"description\"\r\n            element=\"textarea\"\r\n            label=\"Description\"\r\n            validators={[VALIDATOR_MINLENGTH(5)]}\r\n            errorText=\"Please enter a valid description (min. 5 characters).\"\r\n            onInput={inputHandler}\r\n            initialValue={loadedPlace.description}\r\n            initialValid={true}\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            UPDATE GRAFFITI\r\n          </Button>\r\n        </form>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default UpdateGraffiti;\r\n"]},"metadata":{},"sourceType":"module"}